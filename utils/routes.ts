import { existsSync } from "$std/fs/exists.ts";
import { Route } from "../types/route.ts";
import logger from "./logger.ts";

let routeList: Record<string, Route> = {};

export default async function routes(prod?: boolean) {
  if (prod) {
    if (!existsSync("routes.json")) {
      throw Error("routes.json does not exist");
    }
    await loadRoutesProd();
    return routeList;
  }
  await loadRoutes();
  await save();
  return routeList;
}

async function loadRoutesProd() {
  logger.routes.info("loading routes from satellite.gen.ts");
  const satelliteTs = (await import("../satellite.gen.ts")).default as Record<
    string,
    Route
  >;
  routeList = satelliteTs;
  logger.routes.info(`loaded ${Object.keys(satelliteTs).length} routes`);
}

async function loadRoutes(routesDir = "routes") {
  logger.routes.info("loading routes from routes directory");
  await Promise.all([...Deno.readDirSync(routesDir)].map(async (route) => {
    if (route.name[0] === "_") return;
    if (route.isDirectory) {
      await loadRoutes(`${routesDir}/${route.name}`);
    } else {
      await add(`${routesDir}/${route.name}`);
    }
  }));
}

async function save() {
  logger.routes.info("saving routes to satellite.gen.ts");
  const tsFile = [
    "// this file is automatically generated by satellite",
    "// please do not edit",
    "",
    "export default {",
  ];
  Object.entries(routeList).forEach((route) => {
    tsFile.push(
      `  "${route[0]}": (await import("./${route[0]}")).default,`,
    );
  });
  tsFile.push("};");
  await Deno.writeTextFile("satellite.gen.ts", tsFile.join("\n"));
}

async function add(path: string) {
  logger.routes.info(`found route at ${path}`);
  let module: Route;
  try {
    module = (await import(`../${path}`)).default;
    if (!module || !Object.keys(module).length) {
      logger.routes.warn(`route ${path} has no methods, skipping`);
      return;
    }
  } catch (e) {
    logger.routes.error(`failed to load route ${path}: ${e}`);
    return;
  }
  routeList[path] = module;
  logger.routes.info(`loaded route ${path}`);
}
